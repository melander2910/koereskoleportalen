//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from 'react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from 'react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import { Client as ClientClass } from '../api-client';
import { createClient, getClientFactory } from './helpers';

export const Client = () => getClientFactory()(ClientClass);

export type GetOrganisationByIdQueryParameters = {
  id: string ;
}

export type UpdateOrganisationQueryParameters = {
  id: string ;
}

export type DeleteOrganisationQueryParameters = {
  id: number ;
}

export type GetUsersByOrganisationIdQueryParameters = {
  id: string ;
}

export type GetProductionUnitByIdQueryParameters = {
  id: string ;
}

export type UpdateProductionUnitQueryParameters = {
  id: string ;
}

export type DeleteProductionUnitQueryParameters = {
  id: string ;
}

export type GetUsersByProductionUnitIdQueryParameters = {
  id: string ;
}

export type GetUserByIdQueryParameters = {
  id: string ;
}

export type UpdateUserQueryParameters = {
  id: string ;
}

export type DeleteUserQueryParameters = {
  id: string ;
}

export type GetOrganisationsByUserIdQueryParameters = {
  id: string ;
}

export type GetProductionUnitsByUserIdQueryParameters = {
  id: string ;
}

export function getOrganisationByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/Organisation/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getOrganisationByIdDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getOrganisationById,
};
export function getGetOrganisationByIdDefaultOptions() {
  return getOrganisationByIdDefaultOptions;
};
export function setGetOrganisationByIdDefaultOptions(options: typeof getOrganisationByIdDefaultOptions) {
  getOrganisationByIdDefaultOptions = options;
}

export function getOrganisationByIdQueryKey(id: string): QueryKey;
export function getOrganisationByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetOrganisationByIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getOrganisationById',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getOrganisationById',
        ...params
      ]);
  }
}
function __getOrganisationById(context: QueryFunctionContext) {
  return Client().getOrganisationById(
      context.queryKey[2] as string    );
}

export function useGetOrganisationByIdQuery<TSelectData = void, TError = unknown>(dto: GetOrganisationByIdQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetOrganisationByIdQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetOrganisationByIdQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetOrganisationByIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: __getOrganisationById,
    queryKey: getOrganisationByIdQueryKey(id),
    ...getOrganisationByIdDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetOrganisationByIdData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(getOrganisationByIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetOrganisationByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateOrganisationUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/Organisation/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateOrganisationMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'updateOrganisation',
      id as any,
    ]);
}

/**
 * @return Success
 */
export function useUpdateOrganisationMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = updateOrganisationMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().updateOrganisation(id),
    mutationKey: key,
  });
}
  
type UpdateOrganisation__MutationParameters = UpdateOrganisationQueryParameters

/**
 * @return Success
 */
export function useUpdateOrganisationMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, UpdateOrganisation__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateOrganisationQueryParameters}): UseMutationResult<void, unknown, UpdateOrganisation__MutationParameters, TContext> {
  const key = updateOrganisationMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateOrganisation__MutationParameters) => Client().updateOrganisation(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function deleteOrganisationUrl(id: number): string {
  let url_ = getBaseUrl() + "/api/Organisation/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteOrganisationMutationKey(id: number): MutationKey {
  return trimArrayEnd([
      'Client',
      'deleteOrganisation',
      id as any,
    ]);
}

/**
 * @return Success
 */
export function useDeleteOrganisationMutation<TContext>(id: number, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = deleteOrganisationMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().deleteOrganisation(id),
    mutationKey: key,
  });
}
  
type DeleteOrganisation__MutationParameters = DeleteOrganisationQueryParameters

/**
 * @return Success
 */
export function useDeleteOrganisationMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, DeleteOrganisation__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteOrganisationQueryParameters}): UseMutationResult<void, unknown, DeleteOrganisation__MutationParameters, TContext> {
  const key = deleteOrganisationMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeleteOrganisation__MutationParameters) => Client().deleteOrganisation(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function getAllOrganisationsUrl(): string {
  let url_ = getBaseUrl() + "/api/Organisation";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAllOrganisationsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getAllOrganisations,
};
export function getGetAllOrganisationsDefaultOptions() {
  return getAllOrganisationsDefaultOptions;
};
export function setGetAllOrganisationsDefaultOptions(options: typeof getAllOrganisationsDefaultOptions) {
  getAllOrganisationsDefaultOptions = options;
}

export function getAllOrganisationsQueryKey(): QueryKey;
export function getAllOrganisationsQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'getAllOrganisations',
    ]);
}
function __getAllOrganisations(context: QueryFunctionContext) {
  return Client().getAllOrganisations(
    );
}

/**
 * @return Success
 */
export function useGetAllOrganisationsQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetAllOrganisationsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: __getAllOrganisations,
    queryKey: getAllOrganisationsQueryKey(),
    ...getAllOrganisationsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetAllOrganisationsData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getAllOrganisationsQueryKey(),
    updater
  );
}

/**
 * @return Success
 */
export function setGetAllOrganisationsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function createOrganisationUrl(): string {
  let url_ = getBaseUrl() + "/api/Organisation";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createOrganisationMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'createOrganisation',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useCreateOrganisationMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.OrganisationCreateDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.OrganisationCreateDto, TContext> {
  const key = createOrganisationMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.OrganisationCreateDto) => Client().createOrganisation(body),
    mutationKey: key,
  });
}
  
export function getUsersByOrganisationIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/Organisation/{id}/users";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getUsersByOrganisationIdDefaultOptions: Omit<UseQueryOptions<Types.Organisation[], unknown, Types.Organisation[]>, 'queryKey'> = {
  queryFn: __getUsersByOrganisationId,
};
export function getGetUsersByOrganisationIdDefaultOptions() {
  return getUsersByOrganisationIdDefaultOptions;
};
export function setGetUsersByOrganisationIdDefaultOptions(options: typeof getUsersByOrganisationIdDefaultOptions) {
  getUsersByOrganisationIdDefaultOptions = options;
}

export function getUsersByOrganisationIdQueryKey(id: string): QueryKey;
export function getUsersByOrganisationIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetUsersByOrganisationIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getUsersByOrganisationId',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getUsersByOrganisationId',
        ...params
      ]);
  }
}
function __getUsersByOrganisationId(context: QueryFunctionContext) {
  return Client().getUsersByOrganisationId(
      context.queryKey[2] as string    );
}

export function useGetUsersByOrganisationIdQuery<TSelectData = Types.Organisation[], TError = unknown>(dto: GetUsersByOrganisationIdQueryParameters, options?: Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetUsersByOrganisationIdQuery<TSelectData = Types.Organisation[], TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetUsersByOrganisationIdQuery<TSelectData = Types.Organisation[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Organisation[], TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetUsersByOrganisationIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Organisation[], TError, TSelectData>({
    queryFn: __getUsersByOrganisationId,
    queryKey: getUsersByOrganisationIdQueryKey(id),
    ...getUsersByOrganisationIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetUsersByOrganisationIdData(queryClient: QueryClient, updater: (data: Types.Organisation[] | undefined) => Types.Organisation[], id: string) {
  queryClient.setQueryData(getUsersByOrganisationIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetUsersByOrganisationIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Organisation[] | undefined) => Types.Organisation[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getProductionUnitByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/ProductionUnit/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getProductionUnitByIdDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getProductionUnitById,
};
export function getGetProductionUnitByIdDefaultOptions() {
  return getProductionUnitByIdDefaultOptions;
};
export function setGetProductionUnitByIdDefaultOptions(options: typeof getProductionUnitByIdDefaultOptions) {
  getProductionUnitByIdDefaultOptions = options;
}

export function getProductionUnitByIdQueryKey(id: string): QueryKey;
export function getProductionUnitByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetProductionUnitByIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getProductionUnitById',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getProductionUnitById',
        ...params
      ]);
  }
}
function __getProductionUnitById(context: QueryFunctionContext) {
  return Client().getProductionUnitById(
      context.queryKey[2] as string    );
}

export function useGetProductionUnitByIdQuery<TSelectData = void, TError = unknown>(dto: GetProductionUnitByIdQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetProductionUnitByIdQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetProductionUnitByIdQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetProductionUnitByIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: __getProductionUnitById,
    queryKey: getProductionUnitByIdQueryKey(id),
    ...getProductionUnitByIdDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetProductionUnitByIdData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(getProductionUnitByIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetProductionUnitByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateProductionUnitUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/ProductionUnit/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateProductionUnitMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'updateProductionUnit',
      id as any,
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useUpdateProductionUnitMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, Types.ProductionUnitUpdateDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.ProductionUnitUpdateDto, TContext> {
  const key = updateProductionUnitMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.ProductionUnitUpdateDto) => Client().updateProductionUnit(id, body),
    mutationKey: key,
  });
}
  
type UpdateProductionUnit__MutationParameters = UpdateProductionUnitQueryParameters & {
  body: Types.ProductionUnitUpdateDto;
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useUpdateProductionUnitMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, UpdateProductionUnit__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateProductionUnitQueryParameters}): UseMutationResult<void, unknown, UpdateProductionUnit__MutationParameters, TContext> {
  const key = updateProductionUnitMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateProductionUnit__MutationParameters) => Client().updateProductionUnit(data.id ?? options?.parameters?.id!, data.body),
  mutationKey: key,
});
}
  
export function deleteProductionUnitUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/ProductionUnit/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteProductionUnitMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'deleteProductionUnit',
      id as any,
    ]);
}

/**
 * @return Success
 */
export function useDeleteProductionUnitMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = deleteProductionUnitMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().deleteProductionUnit(id),
    mutationKey: key,
  });
}
  
type DeleteProductionUnit__MutationParameters = DeleteProductionUnitQueryParameters

/**
 * @return Success
 */
export function useDeleteProductionUnitMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, DeleteProductionUnit__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteProductionUnitQueryParameters}): UseMutationResult<void, unknown, DeleteProductionUnit__MutationParameters, TContext> {
  const key = deleteProductionUnitMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeleteProductionUnit__MutationParameters) => Client().deleteProductionUnit(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function getAllProductionUnitsUrl(): string {
  let url_ = getBaseUrl() + "/api/ProductionUnit";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAllProductionUnitsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getAllProductionUnits,
};
export function getGetAllProductionUnitsDefaultOptions() {
  return getAllProductionUnitsDefaultOptions;
};
export function setGetAllProductionUnitsDefaultOptions(options: typeof getAllProductionUnitsDefaultOptions) {
  getAllProductionUnitsDefaultOptions = options;
}

export function getAllProductionUnitsQueryKey(): QueryKey;
export function getAllProductionUnitsQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'getAllProductionUnits',
    ]);
}
function __getAllProductionUnits(context: QueryFunctionContext) {
  return Client().getAllProductionUnits(
    );
}

/**
 * @return Success
 */
export function useGetAllProductionUnitsQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetAllProductionUnitsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: __getAllProductionUnits,
    queryKey: getAllProductionUnitsQueryKey(),
    ...getAllProductionUnitsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetAllProductionUnitsData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getAllProductionUnitsQueryKey(),
    updater
  );
}

/**
 * @return Success
 */
export function setGetAllProductionUnitsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function createProductionUnitUrl(): string {
  let url_ = getBaseUrl() + "/api/ProductionUnit";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createProductionUnitMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'createProductionUnit',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useCreateProductionUnitMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.ProductionUnitCreateDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.ProductionUnitCreateDto, TContext> {
  const key = createProductionUnitMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.ProductionUnitCreateDto) => Client().createProductionUnit(body),
    mutationKey: key,
  });
}
  
export function getUsersByProductionUnitIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/ProductionUnit/{id}/users";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getUsersByProductionUnitIdDefaultOptions: Omit<UseQueryOptions<Types.ProductionUnit[], unknown, Types.ProductionUnit[]>, 'queryKey'> = {
  queryFn: __getUsersByProductionUnitId,
};
export function getGetUsersByProductionUnitIdDefaultOptions() {
  return getUsersByProductionUnitIdDefaultOptions;
};
export function setGetUsersByProductionUnitIdDefaultOptions(options: typeof getUsersByProductionUnitIdDefaultOptions) {
  getUsersByProductionUnitIdDefaultOptions = options;
}

export function getUsersByProductionUnitIdQueryKey(id: string): QueryKey;
export function getUsersByProductionUnitIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetUsersByProductionUnitIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getUsersByProductionUnitId',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getUsersByProductionUnitId',
        ...params
      ]);
  }
}
function __getUsersByProductionUnitId(context: QueryFunctionContext) {
  return Client().getUsersByProductionUnitId(
      context.queryKey[2] as string    );
}

export function useGetUsersByProductionUnitIdQuery<TSelectData = Types.ProductionUnit[], TError = unknown>(dto: GetUsersByProductionUnitIdQueryParameters, options?: Omit<UseQueryOptions<Types.ProductionUnit[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetUsersByProductionUnitIdQuery<TSelectData = Types.ProductionUnit[], TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.ProductionUnit[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetUsersByProductionUnitIdQuery<TSelectData = Types.ProductionUnit[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.ProductionUnit[], TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetUsersByProductionUnitIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.ProductionUnit[], TError, TSelectData>({
    queryFn: __getUsersByProductionUnitId,
    queryKey: getUsersByProductionUnitIdQueryKey(id),
    ...getUsersByProductionUnitIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.ProductionUnit[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetUsersByProductionUnitIdData(queryClient: QueryClient, updater: (data: Types.ProductionUnit[] | undefined) => Types.ProductionUnit[], id: string) {
  queryClient.setQueryData(getUsersByProductionUnitIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetUsersByProductionUnitIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.ProductionUnit[] | undefined) => Types.ProductionUnit[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getTenantsByUserIdUrl(): string {
  let url_ = getBaseUrl() + "/api/Tenant";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getTenantsByUserIdDefaultOptions: Omit<UseQueryOptions<Types.Organisation[], unknown, Types.Organisation[]>, 'queryKey'> = {
  queryFn: __getTenantsByUserId,
};
export function getGetTenantsByUserIdDefaultOptions() {
  return getTenantsByUserIdDefaultOptions;
};
export function setGetTenantsByUserIdDefaultOptions(options: typeof getTenantsByUserIdDefaultOptions) {
  getTenantsByUserIdDefaultOptions = options;
}

export function getTenantsByUserIdQueryKey(): QueryKey;
export function getTenantsByUserIdQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'getTenantsByUserId',
    ]);
}
function __getTenantsByUserId(context: QueryFunctionContext) {
  return Client().getTenantsByUserId(
    );
}

/**
 * @return Success
 */
export function useGetTenantsByUserIdQuery<TSelectData = Types.Organisation[], TError = unknown>(options?: Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetTenantsByUserIdQuery<TSelectData = Types.Organisation[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Organisation[], TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Organisation[], TError, TSelectData>({
    queryFn: __getTenantsByUserId,
    queryKey: getTenantsByUserIdQueryKey(),
    ...getTenantsByUserIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetTenantsByUserIdData(queryClient: QueryClient, updater: (data: Types.Organisation[] | undefined) => Types.Organisation[], ) {
  queryClient.setQueryData(getTenantsByUserIdQueryKey(),
    updater
  );
}

/**
 * @return Success
 */
export function setGetTenantsByUserIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Organisation[] | undefined) => Types.Organisation[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function setTenantIdUrl(): string {
  let url_ = getBaseUrl() + "/api/Tenant";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function setTenantIdMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'setTenantId',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useSetTenantIdMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.TenantRequestDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.TenantRequestDto, TContext> {
  const key = setTenantIdMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.TenantRequestDto) => Client().setTenantId(body),
    mutationKey: key,
  });
}
  
export function getUserByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/User/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getUserByIdDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getUserById,
};
export function getGetUserByIdDefaultOptions() {
  return getUserByIdDefaultOptions;
};
export function setGetUserByIdDefaultOptions(options: typeof getUserByIdDefaultOptions) {
  getUserByIdDefaultOptions = options;
}

export function getUserByIdQueryKey(id: string): QueryKey;
export function getUserByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetUserByIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getUserById',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getUserById',
        ...params
      ]);
  }
}
function __getUserById(context: QueryFunctionContext) {
  return Client().getUserById(
      context.queryKey[2] as string    );
}

export function useGetUserByIdQuery<TSelectData = void, TError = unknown>(dto: GetUserByIdQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetUserByIdQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetUserByIdQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetUserByIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: __getUserById,
    queryKey: getUserByIdQueryKey(id),
    ...getUserByIdDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetUserByIdData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(getUserByIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetUserByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUserUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/User/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateUserMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'updateUser',
      id as any,
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useUpdateUserMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, Types.UserUpdateDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.UserUpdateDto, TContext> {
  const key = updateUserMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UserUpdateDto) => Client().updateUser(id, body),
    mutationKey: key,
  });
}
  
type UpdateUser__MutationParameters = UpdateUserQueryParameters & {
  body: Types.UserUpdateDto;
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useUpdateUserMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, UpdateUser__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateUserQueryParameters}): UseMutationResult<void, unknown, UpdateUser__MutationParameters, TContext> {
  const key = updateUserMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateUser__MutationParameters) => Client().updateUser(data.id ?? options?.parameters?.id!, data.body),
  mutationKey: key,
});
}
  
export function deleteUserUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/User/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteUserMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'deleteUser',
      id as any,
    ]);
}

/**
 * @return Success
 */
export function useDeleteUserMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = deleteUserMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().deleteUser(id),
    mutationKey: key,
  });
}
  
type DeleteUser__MutationParameters = DeleteUserQueryParameters

/**
 * @return Success
 */
export function useDeleteUserMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, DeleteUser__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteUserQueryParameters}): UseMutationResult<void, unknown, DeleteUser__MutationParameters, TContext> {
  const key = deleteUserMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeleteUser__MutationParameters) => Client().deleteUser(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function getAllUsersUrl(): string {
  let url_ = getBaseUrl() + "/api/User";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAllUsersDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getAllUsers,
};
export function getGetAllUsersDefaultOptions() {
  return getAllUsersDefaultOptions;
};
export function setGetAllUsersDefaultOptions(options: typeof getAllUsersDefaultOptions) {
  getAllUsersDefaultOptions = options;
}

export function getAllUsersQueryKey(): QueryKey;
export function getAllUsersQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'getAllUsers',
    ]);
}
function __getAllUsers(context: QueryFunctionContext) {
  return Client().getAllUsers(
    );
}

/**
 * @return Success
 */
export function useGetAllUsersQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetAllUsersQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: __getAllUsers,
    queryKey: getAllUsersQueryKey(),
    ...getAllUsersDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetAllUsersData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getAllUsersQueryKey(),
    updater
  );
}

/**
 * @return Success
 */
export function setGetAllUsersDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function createUserUrl(): string {
  let url_ = getBaseUrl() + "/api/User";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createUserMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'createUser',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useCreateUserMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.UserSignupDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.UserSignupDto, TContext> {
  const key = createUserMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UserSignupDto) => Client().createUser(body),
    mutationKey: key,
  });
}
  
export function getOrganisationsByUserIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/User/{id}/organisations";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getOrganisationsByUserIdDefaultOptions: Omit<UseQueryOptions<Types.Organisation[], unknown, Types.Organisation[]>, 'queryKey'> = {
  queryFn: __getOrganisationsByUserId,
};
export function getGetOrganisationsByUserIdDefaultOptions() {
  return getOrganisationsByUserIdDefaultOptions;
};
export function setGetOrganisationsByUserIdDefaultOptions(options: typeof getOrganisationsByUserIdDefaultOptions) {
  getOrganisationsByUserIdDefaultOptions = options;
}

export function getOrganisationsByUserIdQueryKey(id: string): QueryKey;
export function getOrganisationsByUserIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetOrganisationsByUserIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getOrganisationsByUserId',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getOrganisationsByUserId',
        ...params
      ]);
  }
}
function __getOrganisationsByUserId(context: QueryFunctionContext) {
  return Client().getOrganisationsByUserId(
      context.queryKey[2] as string    );
}

export function useGetOrganisationsByUserIdQuery<TSelectData = Types.Organisation[], TError = unknown>(dto: GetOrganisationsByUserIdQueryParameters, options?: Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetOrganisationsByUserIdQuery<TSelectData = Types.Organisation[], TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetOrganisationsByUserIdQuery<TSelectData = Types.Organisation[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Organisation[], TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetOrganisationsByUserIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Organisation[], TError, TSelectData>({
    queryFn: __getOrganisationsByUserId,
    queryKey: getOrganisationsByUserIdQueryKey(id),
    ...getOrganisationsByUserIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.Organisation[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetOrganisationsByUserIdData(queryClient: QueryClient, updater: (data: Types.Organisation[] | undefined) => Types.Organisation[], id: string) {
  queryClient.setQueryData(getOrganisationsByUserIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetOrganisationsByUserIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Organisation[] | undefined) => Types.Organisation[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getProductionUnitsByUserIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/User/{id}/productionunits";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getProductionUnitsByUserIdDefaultOptions: Omit<UseQueryOptions<Types.ProductionUnit[], unknown, Types.ProductionUnit[]>, 'queryKey'> = {
  queryFn: __getProductionUnitsByUserId,
};
export function getGetProductionUnitsByUserIdDefaultOptions() {
  return getProductionUnitsByUserIdDefaultOptions;
};
export function setGetProductionUnitsByUserIdDefaultOptions(options: typeof getProductionUnitsByUserIdDefaultOptions) {
  getProductionUnitsByUserIdDefaultOptions = options;
}

export function getProductionUnitsByUserIdQueryKey(id: string): QueryKey;
export function getProductionUnitsByUserIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetProductionUnitsByUserIdQueryParameters;

    return trimArrayEnd([
        'Client',
        'getProductionUnitsByUserId',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'getProductionUnitsByUserId',
        ...params
      ]);
  }
}
function __getProductionUnitsByUserId(context: QueryFunctionContext) {
  return Client().getProductionUnitsByUserId(
      context.queryKey[2] as string    );
}

export function useGetProductionUnitsByUserIdQuery<TSelectData = Types.ProductionUnit[], TError = unknown>(dto: GetProductionUnitsByUserIdQueryParameters, options?: Omit<UseQueryOptions<Types.ProductionUnit[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useGetProductionUnitsByUserIdQuery<TSelectData = Types.ProductionUnit[], TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.ProductionUnit[], TError, TSelectData>, 'queryKey'>): UseQueryResult<TSelectData, TError>;
export function useGetProductionUnitsByUserIdQuery<TSelectData = Types.ProductionUnit[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.ProductionUnit[], TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetProductionUnitsByUserIdQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.ProductionUnit[], TError, TSelectData>({
    queryFn: __getProductionUnitsByUserId,
    queryKey: getProductionUnitsByUserIdQueryKey(id),
    ...getProductionUnitsByUserIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.ProductionUnit[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetProductionUnitsByUserIdData(queryClient: QueryClient, updater: (data: Types.ProductionUnit[] | undefined) => Types.ProductionUnit[], id: string) {
  queryClient.setQueryData(getProductionUnitsByUserIdQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setGetProductionUnitsByUserIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.ProductionUnit[] | undefined) => Types.ProductionUnit[]) {
  queryClient.setQueryData(queryKey, updater);
}