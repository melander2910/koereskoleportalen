//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

//-----ClientClass--Client---
export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOrganisationById(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisation/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganisationById(_response);
        });
    }

    protected processGetOrganisationById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    updateOrganisation(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisation/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateOrganisation(_response);
        });
    }

    protected processUpdateOrganisation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    deleteOrganisation(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisation/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOrganisation(_response);
        });
    }

    protected processDeleteOrganisation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getAllOrganisations(): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisation";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllOrganisations(_response);
        });
    }

    protected processGetAllOrganisations(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createOrganisation(body: OrganisationCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Organisation";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrganisation(_response);
        });
    }

    protected processCreateOrganisation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getUsersByOrganisationId(id: string): Promise<Organisation[]> {
        let url_ = this.baseUrl + "/api/Organisation/{id}/users";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsersByOrganisationId(_response);
        });
    }

    protected processGetUsersByOrganisationId(response: Response): Promise<Organisation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Organisation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Organisation[]>(null as any);
    }

    /**
     * @return Success
     */
    getProductionUnitById(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ProductionUnit/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductionUnitById(_response);
        });
    }

    protected processGetProductionUnitById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateProductionUnit(id: string, body: ProductionUnitUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ProductionUnit/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateProductionUnit(_response);
        });
    }

    protected processUpdateProductionUnit(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    deleteProductionUnit(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ProductionUnit/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteProductionUnit(_response);
        });
    }

    protected processDeleteProductionUnit(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getAllProductionUnits(): Promise<void> {
        let url_ = this.baseUrl + "/api/ProductionUnit";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllProductionUnits(_response);
        });
    }

    protected processGetAllProductionUnits(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createProductionUnit(body: ProductionUnitCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ProductionUnit";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateProductionUnit(_response);
        });
    }

    protected processCreateProductionUnit(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getUsersByProductionUnitId(id: string): Promise<ProductionUnit[]> {
        let url_ = this.baseUrl + "/api/ProductionUnit/{id}/users";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsersByProductionUnitId(_response);
        });
    }

    protected processGetUsersByProductionUnitId(response: Response): Promise<ProductionUnit[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductionUnit.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductionUnit[]>(null as any);
    }

    /**
     * @return Success
     */
    getTenantsByUserId(): Promise<Organisation[]> {
        let url_ = this.baseUrl + "/api/Tenant";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTenantsByUserId(_response);
        });
    }

    protected processGetTenantsByUserId(response: Response): Promise<Organisation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Organisation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Organisation[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    setTenantId(body: TenantRequestDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Tenant";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetTenantId(_response);
        });
    }

    protected processSetTenantId(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getUserById(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUser(id: string, body: UserUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    deleteUser(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getAllUsers(): Promise<void> {
        let url_ = this.baseUrl + "/api/User";
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllUsers(_response);
        });
    }

    protected processGetAllUsers(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUser(body: UserSignupDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getOrganisationsByUserId(id: string): Promise<Organisation[]> {
        let url_ = this.baseUrl + "/api/User/{id}/organisations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrganisationsByUserId(_response);
        });
    }

    protected processGetOrganisationsByUserId(response: Response): Promise<Organisation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Organisation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Organisation[]>(null as any);
    }

    /**
     * @return Success
     */
    getProductionUnitsByUserId(id: string): Promise<ProductionUnit[]> {
        let url_ = this.baseUrl + "/api/User/{id}/productionunits";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductionUnitsByUserId(_response);
        });
    }

    protected processGetProductionUnitsByUserId(response: Response): Promise<ProductionUnit[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductionUnit.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductionUnit[]>(null as any);
    }
}
//-----/ClientClass----

export * as Query from './api-client/Query';

//-----Types.File-----
export class Course implements ICourse {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    tenantId?: string | undefined;
    subTenantId?: string | undefined;
    name?: string | undefined;
    productionUnit?: ProductionUnit;
    productionUnitId?: string;

    constructor(data?: ICourse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.tenantId = _data["tenantId"];
            this.subTenantId = _data["subTenantId"];
            this.name = _data["name"];
            this.productionUnit = _data["productionUnit"] ? ProductionUnit.fromJS(_data["productionUnit"]) : <any>undefined;
            this.productionUnitId = _data["productionUnitId"];
        }
    }

    static fromJS(data: any): Course {
        data = typeof data === 'object' ? data : {};
        let result = new Course();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["subTenantId"] = this.subTenantId;
        data["name"] = this.name;
        data["productionUnit"] = this.productionUnit ? this.productionUnit.toJSON() : <any>undefined;
        data["productionUnitId"] = this.productionUnitId;
        return data;
    }
}

export interface ICourse {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    tenantId?: string | undefined;
    subTenantId?: string | undefined;
    name?: string | undefined;
    productionUnit?: ProductionUnit;
    productionUnitId?: string;
}

export class Organisation implements IOrganisation {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    claimedByOwner?: boolean | undefined;
    productionUnits?: ProductionUnit[] | undefined;
    users?: User[] | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    cvrApiModifiedDate?: Date | undefined;
    industryCode?: string | undefined;
    industryDescription?: string | undefined;
    municipality?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
    latitude?: number | undefined;
    longtitude?: number | undefined;
    advertisementProtection?: boolean | undefined;
    organisationType?: string | undefined;
    status?: string | undefined;

    constructor(data?: IOrganisation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.cvr = _data["cvr"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.claimedByOwner = _data["claimedByOwner"];
            if (Array.isArray(_data["productionUnits"])) {
                this.productionUnits = [] as any;
                for (let item of _data["productionUnits"])
                    this.productionUnits!.push(ProductionUnit.fromJS(item));
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.cvrApiModifiedDate = _data["cvrApiModifiedDate"] ? new Date(_data["cvrApiModifiedDate"].toString()) : <any>undefined;
            this.industryCode = _data["industryCode"];
            this.industryDescription = _data["industryDescription"];
            this.municipality = _data["municipality"];
            this.country = _data["country"];
            this.city = _data["city"];
            this.streetAddress = _data["streetAddress"];
            this.zipcode = _data["zipcode"];
            this.latitude = _data["latitude"];
            this.longtitude = _data["longtitude"];
            this.advertisementProtection = _data["advertisementProtection"];
            this.organisationType = _data["organisationType"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Organisation {
        data = typeof data === 'object' ? data : {};
        let result = new Organisation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["cvr"] = this.cvr;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["claimedByOwner"] = this.claimedByOwner;
        if (Array.isArray(this.productionUnits)) {
            data["productionUnits"] = [];
            for (let item of this.productionUnits)
                data["productionUnits"].push(item.toJSON());
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["cvrApiModifiedDate"] = this.cvrApiModifiedDate ? this.cvrApiModifiedDate.toISOString() : <any>undefined;
        data["industryCode"] = this.industryCode;
        data["industryDescription"] = this.industryDescription;
        data["municipality"] = this.municipality;
        data["country"] = this.country;
        data["city"] = this.city;
        data["streetAddress"] = this.streetAddress;
        data["zipcode"] = this.zipcode;
        data["latitude"] = this.latitude;
        data["longtitude"] = this.longtitude;
        data["advertisementProtection"] = this.advertisementProtection;
        data["organisationType"] = this.organisationType;
        data["status"] = this.status;
        return data;
    }
}

export interface IOrganisation {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    claimedByOwner?: boolean | undefined;
    productionUnits?: ProductionUnit[] | undefined;
    users?: User[] | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    cvrApiModifiedDate?: Date | undefined;
    industryCode?: string | undefined;
    industryDescription?: string | undefined;
    municipality?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
    latitude?: number | undefined;
    longtitude?: number | undefined;
    advertisementProtection?: boolean | undefined;
    organisationType?: string | undefined;
    status?: string | undefined;
}

export class OrganisationCreateDto implements IOrganisationCreateDto {
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;

    constructor(data?: IOrganisationCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cvr = _data["cvr"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.city = _data["city"];
            this.streetAddress = _data["streetAddress"];
            this.zipcode = _data["zipcode"];
        }
    }

    static fromJS(data: any): OrganisationCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganisationCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cvr"] = this.cvr;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["city"] = this.city;
        data["streetAddress"] = this.streetAddress;
        data["zipcode"] = this.zipcode;
        return data;
    }
}

export interface IOrganisationCreateDto {
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
}

export class ProductionUnit implements IProductionUnit {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    tenantId?: string | undefined;
    productionUnitNumber?: string | undefined;
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    cvrApiModifiedDate?: Date | undefined;
    organisation?: Organisation;
    organisationId?: string;
    users?: User[] | undefined;
    courses?: Course[] | undefined;
    municipality?: string | undefined;
    industryCode?: string | undefined;
    industryDescription?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
    latitude?: number | undefined;
    longtitude?: number | undefined;
    status?: string | undefined;

    constructor(data?: IProductionUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.tenantId = _data["tenantId"];
            this.productionUnitNumber = _data["productionUnitNumber"];
            this.cvr = _data["cvr"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.cvrApiModifiedDate = _data["cvrApiModifiedDate"] ? new Date(_data["cvrApiModifiedDate"].toString()) : <any>undefined;
            this.organisation = _data["organisation"] ? Organisation.fromJS(_data["organisation"]) : <any>undefined;
            this.organisationId = _data["organisationId"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
            if (Array.isArray(_data["courses"])) {
                this.courses = [] as any;
                for (let item of _data["courses"])
                    this.courses!.push(Course.fromJS(item));
            }
            this.municipality = _data["municipality"];
            this.industryCode = _data["industryCode"];
            this.industryDescription = _data["industryDescription"];
            this.country = _data["country"];
            this.city = _data["city"];
            this.streetAddress = _data["streetAddress"];
            this.zipcode = _data["zipcode"];
            this.latitude = _data["latitude"];
            this.longtitude = _data["longtitude"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ProductionUnit {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["productionUnitNumber"] = this.productionUnitNumber;
        data["cvr"] = this.cvr;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["cvrApiModifiedDate"] = this.cvrApiModifiedDate ? this.cvrApiModifiedDate.toISOString() : <any>undefined;
        data["organisation"] = this.organisation ? this.organisation.toJSON() : <any>undefined;
        data["organisationId"] = this.organisationId;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (Array.isArray(this.courses)) {
            data["courses"] = [];
            for (let item of this.courses)
                data["courses"].push(item.toJSON());
        }
        data["municipality"] = this.municipality;
        data["industryCode"] = this.industryCode;
        data["industryDescription"] = this.industryDescription;
        data["country"] = this.country;
        data["city"] = this.city;
        data["streetAddress"] = this.streetAddress;
        data["zipcode"] = this.zipcode;
        data["latitude"] = this.latitude;
        data["longtitude"] = this.longtitude;
        data["status"] = this.status;
        return data;
    }
}

export interface IProductionUnit {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    tenantId?: string | undefined;
    productionUnitNumber?: string | undefined;
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    cvrApiModifiedDate?: Date | undefined;
    organisation?: Organisation;
    organisationId?: string;
    users?: User[] | undefined;
    courses?: Course[] | undefined;
    municipality?: string | undefined;
    industryCode?: string | undefined;
    industryDescription?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
    latitude?: number | undefined;
    longtitude?: number | undefined;
    status?: string | undefined;
}

export class ProductionUnitCreateDto implements IProductionUnitCreateDto {
    productionUnitNumber?: string | undefined;
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;

    constructor(data?: IProductionUnitCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productionUnitNumber = _data["productionUnitNumber"];
            this.cvr = _data["cvr"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.city = _data["city"];
            this.streetAddress = _data["streetAddress"];
            this.zipcode = _data["zipcode"];
        }
    }

    static fromJS(data: any): ProductionUnitCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionUnitCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productionUnitNumber"] = this.productionUnitNumber;
        data["cvr"] = this.cvr;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["city"] = this.city;
        data["streetAddress"] = this.streetAddress;
        data["zipcode"] = this.zipcode;
        return data;
    }
}

export interface IProductionUnitCreateDto {
    productionUnitNumber?: string | undefined;
    cvr?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
}

export class ProductionUnitUpdateDto implements IProductionUnitUpdateDto {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;

    constructor(data?: IProductionUnitUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.city = _data["city"];
            this.streetAddress = _data["streetAddress"];
            this.zipcode = _data["zipcode"];
        }
    }

    static fromJS(data: any): ProductionUnitUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionUnitUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["city"] = this.city;
        data["streetAddress"] = this.streetAddress;
        data["zipcode"] = this.zipcode;
        return data;
    }
}

export interface IProductionUnitUpdateDto {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    streetAddress?: string | undefined;
    zipcode?: string | undefined;
}

export class TenantRequestDto implements ITenantRequestDto {
    tenantId?: string | undefined;

    constructor(data?: ITenantRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
        }
    }

    static fromJS(data: any): TenantRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        return data;
    }
}

export interface ITenantRequestDto {
    tenantId?: string | undefined;
}

export class User implements IUser {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    organisations?: Organisation[] | undefined;
    productionUnits?: ProductionUnit[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            if (Array.isArray(_data["organisations"])) {
                this.organisations = [] as any;
                for (let item of _data["organisations"])
                    this.organisations!.push(Organisation.fromJS(item));
            }
            if (Array.isArray(_data["productionUnits"])) {
                this.productionUnits = [] as any;
                for (let item of _data["productionUnits"])
                    this.productionUnits!.push(ProductionUnit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        if (Array.isArray(this.organisations)) {
            data["organisations"] = [];
            for (let item of this.organisations)
                data["organisations"].push(item.toJSON());
        }
        if (Array.isArray(this.productionUnits)) {
            data["productionUnits"] = [];
            for (let item of this.productionUnits)
                data["productionUnits"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    id?: string;
    createdDate?: Date;
    modifiedDate?: Date;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    organisations?: Organisation[] | undefined;
    productionUnits?: ProductionUnit[] | undefined;
}

export class UserSignupDto implements IUserSignupDto {
    id?: string;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;

    constructor(data?: IUserSignupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): UserSignupDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSignupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        return data;
    }
}

export interface IUserSignupDto {
    id?: string;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
}

export class UserUpdateDto implements IUserUpdateDto {
    firstname?: string | undefined;
    lastname?: string | undefined;
    address?: string | undefined;

    constructor(data?: IUserUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): UserUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["address"] = this.address;
        return data;
    }
}

export interface IUserUpdateDto {
    firstname?: string | undefined;
    lastname?: string | undefined;
    address?: string | undefined;
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

//-----/Types.File-----

import { addResultTypeFactory } from './api-client/helpers';
export { setBaseUrl, getBaseUrl } from './api-client/helpers';
export { setFetchFactory, getFetch } from './api-client/helpers';
